<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hector' log - blog</title><link href="/hectormorago/" rel="alternate"></link><link href="/hectormorago/feeds/blog.atom.xml" rel="self"></link><id>/hectormorago/</id><updated>2020-04-06T20:31:00+02:00</updated><subtitle>A personal blog.</subtitle><entry><title>Algoritmos de planificación</title><link href="/hectormorago/alg-planificacion.html" rel="alternate"></link><published>2020-04-06T20:31:00+02:00</published><updated>2020-04-06T20:31:00+02:00</updated><author><name>Hector Perez-Morago</name></author><id>tag:None,2020-04-06:/hectormorago/alg-planificacion.html</id><summary type="html">&lt;p&gt;Revisión de los pricipales algortimos de planificación.&lt;/p&gt;</summary><content type="html">&lt;p&gt;En sistemas operativos multitarea, donde podemos podemos ejecutar cientos procesos al mismo tiempo,
necesitamos de herramientas que de algún modo multiplexen los recursos hardware del sistema. Una de estas herramientas 
la proporciona el sistema operativo (SO), mediante el &lt;strong&gt;planificador&lt;/strong&gt; o scheduler. En general podemos distinguir tres 
&lt;strong&gt;niveles de planificación&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a corto plazo&lt;/strong&gt;, se encarga de decidir el siguiente proceso que pasará a ejecutarse de entre 
aquellos que se encuentran preparados para su ejecución. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a medio plazo&lt;/strong&gt;, decide entre los procesos que están en memoria secundaria cual pasa a memoria principal, y viceversa. 
Es decir, regula el grado de multiprogramación. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a largo plazo&lt;/strong&gt;, decide qué trabajo de la cola de trabajo por lotes pasa a ser ejecutado en el sistema mediante la creación 
de un proceso.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aparte de estos tres niveles de planificación se puede distinguir un cuarto nivel, la &lt;strong&gt;planificación de E/S&lt;/strong&gt; que
decide qué proceso en una cola de un dispositivo de E/S pasa a utilizar dicho dispositivo.&lt;/p&gt;
&lt;p&gt;La parte del SO que se encarga de realizar las tareas de planificación puede dividirse en los siguientes componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encolador&lt;/strong&gt;  o enqueuer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conmutador de contexto&lt;/strong&gt; o context switcher.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribuidor&lt;/strong&gt; o despachador (dispatcher). Se encarga de seleccionar un proceso de la cola de procesos preparados de 
acuerdo con un determinado algoritmo de planificación.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La tarea de plamificación introduce &lt;strong&gt;sobrecarga&lt;/strong&gt;, es decir, tiempo que el SO está dedicado a tareas que no repercute en los 
procesos de los usuarios y que, por tanto, hay que minimizar. Hay que tener en cuenta determinadas 
Latencia de despacho, es el tiempo promedio que tarda el distribuidor en detener un proceso y comenzar la
ejecución de otro. Lo deseable que la latencia de despacho sea lo más pequeña posible. Sin embargo, muchos
SOs con objeto de asegurar la integridad de sus estructuras de datos no permiten que se pueda expropiar un
proceso en modo núcleo que esté realizando una llamada al sistema, hasta que ésta no se complete o el proceso
entre en el estado bloqueado. Tales SOs se dicen que son de núcleo no expropiable. En dicho caso la latencia de
despacho puede ser larga ya que algunas llamadas al sistema son complejas.&lt;/p&gt;
&lt;p&gt;En general a la hora de planificar procesos vamos a tener en cuenta una serie de criterios generales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Previsibilidad. Tareas similares igual tiempo.&lt;/li&gt;
&lt;li&gt;Uso equilibrado de recursos.&lt;/li&gt;
&lt;li&gt;Proporcionalidad. Tareas que parecen sencillas deben ejecutarse en plazos relativamente cortos.&lt;/li&gt;
&lt;li&gt;Equidad.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entre los &lt;strong&gt;principales algoritmos de planificación&lt;/strong&gt; podemos citar los siguientes:&lt;/p&gt;
&lt;h2&gt;FCFS&lt;/h2&gt;
&lt;p&gt;Primero en llegar primero en ser servido, FCFS (First Come First Served). Es uno de los algoritmos de planificación 
más sencillos de implementar. El planificador maneja la cola de procesos como una cola FIFO. Entre sus ventajas destacamos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilidad de implementación.&lt;/li&gt;
&lt;li&gt;Poca sobrecarga.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sus principales desventajas son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Penaliza los procesos con tiempos de ráfaga más cortos con respecto a aqquellos que tienen tiempo de ráfaga más largos.&lt;/li&gt;
&lt;li&gt;Puede aparecer lo que se denomina como efecto convoy.&lt;/li&gt;
&lt;li&gt;Sufre la anomalia de belady.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SJF&lt;/h2&gt;
&lt;p&gt;Primero el que tiene un tiempo de ráfaga más corto, SJF (Shortest Job First). Este algoritmo de planificación selecciona 
como proceso para ser ejecutado a aquel que tiene un tiempo de ráfaga de CPU más pequeño. Este algoritmo es difícil de 
implementar en la práctica ya que requiere conocer por adelantado los tiempos de ráfaga de CPU de todos los procesos, lo cual
no es posible. Para su implemntación lo que se suele utilizar es un estimación del tiempo de ráfaga de CPU basado en los 
tiempos de ráfaga pasados. Existen dos implementaciones de este algoritmo en función de si se sigue una planificacion de tipo
cooperativa o expropiativa. Entre sus principales ventajas se encuentran las siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elimina algunos de los problemas del algoritmo FCFS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sus principales desventajas son::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Difícil de implementar.&lt;/li&gt;
&lt;li&gt;Sobrecarga introducidad en el sistema debido al calculo de las estimaciones del tiempo de ráfaga de los procesos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SRT&lt;/h2&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista genérica de elementos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista numerada:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Round Robin&lt;/h2&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista genérica de elementos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista numerada:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ol&gt;</content><category term="blog"></category><category term="SSOO"></category><category term="algoritmos"></category><category term="otros"></category></entry><entry><title>Prueba</title><link href="/hectormorago/prueba.html" rel="alternate"></link><published>2020-04-06T20:31:00+02:00</published><updated>2020-04-06T20:31:00+02:00</updated><author><name>Hector Perez-Morago</name></author><id>tag:None,2020-04-06:/hectormorago/prueba.html</id><summary type="html">&lt;p&gt;Mi primer post usando Pelican y GitHub Pages&lt;/p&gt;</summary><content type="html">&lt;p&gt;Prueba de archivo &lt;em&gt;Markdown&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Título&lt;/h2&gt;
&lt;h3&gt;Subtítulo&lt;/h3&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista genérica de elementos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este es un ejemplo de texto que da entrada a una lista numerada:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elemento 1&lt;/li&gt;
&lt;li&gt;Elemento 2&lt;/li&gt;
&lt;li&gt;Elemento 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Al texto en Markdown puedes añadirle formato como &lt;strong&gt;negrita&lt;/strong&gt; o &lt;em&gt;cursiva&lt;/em&gt; de una manera muy sencilla.&lt;/p&gt;
&lt;p&gt;Todo esto fue extraído de este &lt;a href="https://markdown.es/sintaxis-markdown/"&gt;Post sobre markdown&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category><category term="principal"></category><category term="otros"></category></entry></feed>